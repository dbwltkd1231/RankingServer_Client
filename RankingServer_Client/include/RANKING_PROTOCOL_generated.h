// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RANKINGPROTOCOL_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_RANKINGPROTOCOL_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace protocol {

struct REQUEST_SAVE_SCORE;
struct REQUEST_SAVE_SCOREBuilder;

struct RESPONSE_SAVE_SCORE;
struct RESPONSE_SAVE_SCOREBuilder;

struct REQUEST_PLAYER_RANKING;
struct REQUEST_PLAYER_RANKINGBuilder;

struct RESPONSE_PLAYER_RANKING;
struct RESPONSE_PLAYER_RANKINGBuilder;

struct RANKING_PROTOCOL;
struct RANKING_PROTOCOLBuilder;

enum MESSAGETYPE : int32_t {
  MESSAGETYPE_BEGIN = 0,
  MESSAGETYPE_REQUEST_SAVE_SCORE = 1,
  MESSAGETYPE_RESPONSE_SAVE_SCORE = 2,
  MESSAGETYPE_REQUEST_PLAYER_RANKING = 3,
  MESSAGETYPE_RESPONSE_PLAYER_RANKING = 4,
  MESSAGETYPE_END = 5,
  MESSAGETYPE_MIN = MESSAGETYPE_BEGIN,
  MESSAGETYPE_MAX = MESSAGETYPE_END
};

inline const MESSAGETYPE (&EnumValuesMESSAGETYPE())[6] {
  static const MESSAGETYPE values[] = {
    MESSAGETYPE_BEGIN,
    MESSAGETYPE_REQUEST_SAVE_SCORE,
    MESSAGETYPE_RESPONSE_SAVE_SCORE,
    MESSAGETYPE_REQUEST_PLAYER_RANKING,
    MESSAGETYPE_RESPONSE_PLAYER_RANKING,
    MESSAGETYPE_END
  };
  return values;
}

inline const char * const *EnumNamesMESSAGETYPE() {
  static const char * const names[7] = {
    "BEGIN",
    "REQUEST_SAVE_SCORE",
    "RESPONSE_SAVE_SCORE",
    "REQUEST_PLAYER_RANKING",
    "RESPONSE_PLAYER_RANKING",
    "END",
    nullptr
  };
  return names;
}

inline const char *EnumNameMESSAGETYPE(MESSAGETYPE e) {
  if (::flatbuffers::IsOutRange(e, MESSAGETYPE_BEGIN, MESSAGETYPE_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMESSAGETYPE()[index];
}

enum MessageContent : uint8_t {
  MessageContent_NONE = 0,
  MessageContent_REQUEST_SAVE_SCORE = 1,
  MessageContent_RESPONSE_SAVE_SCORE = 2,
  MessageContent_REQUEST_PLAYER_RANKING = 3,
  MessageContent_RESPONSE_PLAYER_RANKING = 4,
  MessageContent_MIN = MessageContent_NONE,
  MessageContent_MAX = MessageContent_RESPONSE_PLAYER_RANKING
};

inline const MessageContent (&EnumValuesMessageContent())[5] {
  static const MessageContent values[] = {
    MessageContent_NONE,
    MessageContent_REQUEST_SAVE_SCORE,
    MessageContent_RESPONSE_SAVE_SCORE,
    MessageContent_REQUEST_PLAYER_RANKING,
    MessageContent_RESPONSE_PLAYER_RANKING
  };
  return values;
}

inline const char * const *EnumNamesMessageContent() {
  static const char * const names[6] = {
    "NONE",
    "REQUEST_SAVE_SCORE",
    "RESPONSE_SAVE_SCORE",
    "REQUEST_PLAYER_RANKING",
    "RESPONSE_PLAYER_RANKING",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageContent(MessageContent e) {
  if (::flatbuffers::IsOutRange(e, MessageContent_NONE, MessageContent_RESPONSE_PLAYER_RANKING)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageContent()[index];
}

template<typename T> struct MessageContentTraits {
  static const MessageContent enum_value = MessageContent_NONE;
};

template<> struct MessageContentTraits<protocol::REQUEST_SAVE_SCORE> {
  static const MessageContent enum_value = MessageContent_REQUEST_SAVE_SCORE;
};

template<> struct MessageContentTraits<protocol::RESPONSE_SAVE_SCORE> {
  static const MessageContent enum_value = MessageContent_RESPONSE_SAVE_SCORE;
};

template<> struct MessageContentTraits<protocol::REQUEST_PLAYER_RANKING> {
  static const MessageContent enum_value = MessageContent_REQUEST_PLAYER_RANKING;
};

template<> struct MessageContentTraits<protocol::RESPONSE_PLAYER_RANKING> {
  static const MessageContent enum_value = MessageContent_RESPONSE_PLAYER_RANKING;
};

bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type);
bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct REQUEST_SAVE_SCORE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_SAVE_SCOREBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_SCORE = 6,
    VT_LAST_UPDATE = 8
  };
  const ::flatbuffers::String *player_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLAYER_ID);
  }
  int32_t score() const {
    return GetField<int32_t>(VT_SCORE, 0);
  }
  int64_t last_update() const {
    return GetField<int64_t>(VT_LAST_UPDATE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYER_ID) &&
           verifier.VerifyString(player_id()) &&
           VerifyField<int32_t>(verifier, VT_SCORE, 4) &&
           VerifyField<int64_t>(verifier, VT_LAST_UPDATE, 8) &&
           verifier.EndTable();
  }
};

struct REQUEST_SAVE_SCOREBuilder {
  typedef REQUEST_SAVE_SCORE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(::flatbuffers::Offset<::flatbuffers::String> player_id) {
    fbb_.AddOffset(REQUEST_SAVE_SCORE::VT_PLAYER_ID, player_id);
  }
  void add_score(int32_t score) {
    fbb_.AddElement<int32_t>(REQUEST_SAVE_SCORE::VT_SCORE, score, 0);
  }
  void add_last_update(int64_t last_update) {
    fbb_.AddElement<int64_t>(REQUEST_SAVE_SCORE::VT_LAST_UPDATE, last_update, 0);
  }
  explicit REQUEST_SAVE_SCOREBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_SAVE_SCORE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_SAVE_SCORE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_SAVE_SCORE> CreateREQUEST_SAVE_SCORE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> player_id = 0,
    int32_t score = 0,
    int64_t last_update = 0) {
  REQUEST_SAVE_SCOREBuilder builder_(_fbb);
  builder_.add_last_update(last_update);
  builder_.add_score(score);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_SAVE_SCORE> CreateREQUEST_SAVE_SCOREDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *player_id = nullptr,
    int32_t score = 0,
    int64_t last_update = 0) {
  auto player_id__ = player_id ? _fbb.CreateString(player_id) : 0;
  return protocol::CreateREQUEST_SAVE_SCORE(
      _fbb,
      player_id__,
      score,
      last_update);
}

struct RESPONSE_SAVE_SCORE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_SAVE_SCOREBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FEEDBACK = 4
  };
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_SAVE_SCOREBuilder {
  typedef RESPONSE_SAVE_SCORE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_SAVE_SCORE::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_SAVE_SCOREBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_SAVE_SCORE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_SAVE_SCORE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_SAVE_SCORE> CreateRESPONSE_SAVE_SCORE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool feedback = false) {
  RESPONSE_SAVE_SCOREBuilder builder_(_fbb);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct REQUEST_PLAYER_RANKING FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_PLAYER_RANKINGBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4
  };
  const ::flatbuffers::String *player_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLAYER_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYER_ID) &&
           verifier.VerifyString(player_id()) &&
           verifier.EndTable();
  }
};

struct REQUEST_PLAYER_RANKINGBuilder {
  typedef REQUEST_PLAYER_RANKING Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(::flatbuffers::Offset<::flatbuffers::String> player_id) {
    fbb_.AddOffset(REQUEST_PLAYER_RANKING::VT_PLAYER_ID, player_id);
  }
  explicit REQUEST_PLAYER_RANKINGBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_PLAYER_RANKING> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_PLAYER_RANKING>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_PLAYER_RANKING> CreateREQUEST_PLAYER_RANKING(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> player_id = 0) {
  REQUEST_PLAYER_RANKINGBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_PLAYER_RANKING> CreateREQUEST_PLAYER_RANKINGDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *player_id = nullptr) {
  auto player_id__ = player_id ? _fbb.CreateString(player_id) : 0;
  return protocol::CreateREQUEST_PLAYER_RANKING(
      _fbb,
      player_id__);
}

struct RESPONSE_PLAYER_RANKING FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_PLAYER_RANKINGBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_SCORE = 6,
    VT_RANKING = 8,
    VT_IN_RANKING = 10,
    VT_FEEDBACK = 12
  };
  const ::flatbuffers::String *player_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLAYER_ID);
  }
  int32_t score() const {
    return GetField<int32_t>(VT_SCORE, 0);
  }
  int32_t ranking() const {
    return GetField<int32_t>(VT_RANKING, 0);
  }
  bool in_ranking() const {
    return GetField<uint8_t>(VT_IN_RANKING, 0) != 0;
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYER_ID) &&
           verifier.VerifyString(player_id()) &&
           VerifyField<int32_t>(verifier, VT_SCORE, 4) &&
           VerifyField<int32_t>(verifier, VT_RANKING, 4) &&
           VerifyField<uint8_t>(verifier, VT_IN_RANKING, 1) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_PLAYER_RANKINGBuilder {
  typedef RESPONSE_PLAYER_RANKING Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(::flatbuffers::Offset<::flatbuffers::String> player_id) {
    fbb_.AddOffset(RESPONSE_PLAYER_RANKING::VT_PLAYER_ID, player_id);
  }
  void add_score(int32_t score) {
    fbb_.AddElement<int32_t>(RESPONSE_PLAYER_RANKING::VT_SCORE, score, 0);
  }
  void add_ranking(int32_t ranking) {
    fbb_.AddElement<int32_t>(RESPONSE_PLAYER_RANKING::VT_RANKING, ranking, 0);
  }
  void add_in_ranking(bool in_ranking) {
    fbb_.AddElement<uint8_t>(RESPONSE_PLAYER_RANKING::VT_IN_RANKING, static_cast<uint8_t>(in_ranking), 0);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_PLAYER_RANKING::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_PLAYER_RANKINGBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_PLAYER_RANKING> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_PLAYER_RANKING>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_PLAYER_RANKING> CreateRESPONSE_PLAYER_RANKING(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> player_id = 0,
    int32_t score = 0,
    int32_t ranking = 0,
    bool in_ranking = false,
    bool feedback = false) {
  RESPONSE_PLAYER_RANKINGBuilder builder_(_fbb);
  builder_.add_ranking(ranking);
  builder_.add_score(score);
  builder_.add_player_id(player_id);
  builder_.add_feedback(feedback);
  builder_.add_in_ranking(in_ranking);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RESPONSE_PLAYER_RANKING> CreateRESPONSE_PLAYER_RANKINGDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *player_id = nullptr,
    int32_t score = 0,
    int32_t ranking = 0,
    bool in_ranking = false,
    bool feedback = false) {
  auto player_id__ = player_id ? _fbb.CreateString(player_id) : 0;
  return protocol::CreateRESPONSE_PLAYER_RANKING(
      _fbb,
      player_id__,
      score,
      ranking,
      in_ranking,
      feedback);
}

struct RANKING_PROTOCOL FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RANKING_PROTOCOLBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_CONTENT_TYPE = 6,
    VT_CONTENT = 8
  };
  protocol::MESSAGETYPE message_type() const {
    return static_cast<protocol::MESSAGETYPE>(GetField<int32_t>(VT_MESSAGE_TYPE, 0));
  }
  protocol::MessageContent content_type() const {
    return static_cast<protocol::MessageContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const protocol::REQUEST_SAVE_SCORE *content_as_REQUEST_SAVE_SCORE() const {
    return content_type() == protocol::MessageContent_REQUEST_SAVE_SCORE ? static_cast<const protocol::REQUEST_SAVE_SCORE *>(content()) : nullptr;
  }
  const protocol::RESPONSE_SAVE_SCORE *content_as_RESPONSE_SAVE_SCORE() const {
    return content_type() == protocol::MessageContent_RESPONSE_SAVE_SCORE ? static_cast<const protocol::RESPONSE_SAVE_SCORE *>(content()) : nullptr;
  }
  const protocol::REQUEST_PLAYER_RANKING *content_as_REQUEST_PLAYER_RANKING() const {
    return content_type() == protocol::MessageContent_REQUEST_PLAYER_RANKING ? static_cast<const protocol::REQUEST_PLAYER_RANKING *>(content()) : nullptr;
  }
  const protocol::RESPONSE_PLAYER_RANKING *content_as_RESPONSE_PLAYER_RANKING() const {
    return content_type() == protocol::MessageContent_RESPONSE_PLAYER_RANKING ? static_cast<const protocol::RESPONSE_PLAYER_RANKING *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MESSAGE_TYPE, 4) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyMessageContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const protocol::REQUEST_SAVE_SCORE *RANKING_PROTOCOL::content_as<protocol::REQUEST_SAVE_SCORE>() const {
  return content_as_REQUEST_SAVE_SCORE();
}

template<> inline const protocol::RESPONSE_SAVE_SCORE *RANKING_PROTOCOL::content_as<protocol::RESPONSE_SAVE_SCORE>() const {
  return content_as_RESPONSE_SAVE_SCORE();
}

template<> inline const protocol::REQUEST_PLAYER_RANKING *RANKING_PROTOCOL::content_as<protocol::REQUEST_PLAYER_RANKING>() const {
  return content_as_REQUEST_PLAYER_RANKING();
}

template<> inline const protocol::RESPONSE_PLAYER_RANKING *RANKING_PROTOCOL::content_as<protocol::RESPONSE_PLAYER_RANKING>() const {
  return content_as_RESPONSE_PLAYER_RANKING();
}

struct RANKING_PROTOCOLBuilder {
  typedef RANKING_PROTOCOL Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(protocol::MESSAGETYPE message_type) {
    fbb_.AddElement<int32_t>(RANKING_PROTOCOL::VT_MESSAGE_TYPE, static_cast<int32_t>(message_type), 0);
  }
  void add_content_type(protocol::MessageContent content_type) {
    fbb_.AddElement<uint8_t>(RANKING_PROTOCOL::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(RANKING_PROTOCOL::VT_CONTENT, content);
  }
  explicit RANKING_PROTOCOLBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RANKING_PROTOCOL> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RANKING_PROTOCOL>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RANKING_PROTOCOL> CreateRANKING_PROTOCOL(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    protocol::MESSAGETYPE message_type = protocol::MESSAGETYPE_BEGIN,
    protocol::MessageContent content_type = protocol::MessageContent_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  RANKING_PROTOCOLBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_message_type(message_type);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type) {
  switch (type) {
    case MessageContent_NONE: {
      return true;
    }
    case MessageContent_REQUEST_SAVE_SCORE: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_SAVE_SCORE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_SAVE_SCORE: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_SAVE_SCORE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_PLAYER_RANKING: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_PLAYER_RANKING *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_PLAYER_RANKING: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_PLAYER_RANKING *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageContent(
        verifier,  values->Get(i), types->GetEnum<MessageContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const protocol::RANKING_PROTOCOL *GetRANKING_PROTOCOL(const void *buf) {
  return ::flatbuffers::GetRoot<protocol::RANKING_PROTOCOL>(buf);
}

inline const protocol::RANKING_PROTOCOL *GetSizePrefixedRANKING_PROTOCOL(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<protocol::RANKING_PROTOCOL>(buf);
}

inline bool VerifyRANKING_PROTOCOLBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<protocol::RANKING_PROTOCOL>(nullptr);
}

inline bool VerifySizePrefixedRANKING_PROTOCOLBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<protocol::RANKING_PROTOCOL>(nullptr);
}

inline void FinishRANKING_PROTOCOLBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::RANKING_PROTOCOL> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRANKING_PROTOCOLBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::RANKING_PROTOCOL> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_RANKINGPROTOCOL_PROTOCOL_H_
